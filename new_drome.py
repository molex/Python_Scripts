# --------------
# USER INSTRUCTIONS
#
# WRITE A FUNCTION, LONGEST_SUBPALINDROME_SLICE(TEXT) THAT TAKES 
# A STRING AS INPUT AND RETURNS THE I AND J INDICES THAT 
# CORRESPOND TO THE BEGINNING AND END INDICES OF THE LONGEST 
# PALINDROME IN THE STRING. 
#
# GRADING NOTES:
# 
# YOU WILL ONLY BE MARKED CORRECT IF YOUR FUNCTION RUNS 
# EFFICIENTLY ENOUGH. WE WILL BE MEASURING EFFICENCY BY COUNTING
# THE NUMBER OF TIMES YOU ACCESS EACH STRING. THAT COUNT MUST BE
# BELOW A CERTAIN THRESHOLD TO BE MARKED CORRECT.
# IMPROVED EFFICIENCY:
# WRITE A FUNCTION TO GENERATE ALL POSSIBLE SUB-WORDS LIKE [WORD,I,J]
# SORT LIST ACCORDING TO LENGTH
# FOR EACH WORD, STARTING WITH THE LONGEST WORD,
# CHECK IF VALID

DEF LONGEST_SUBPALINDROME_SLICE(TEXT):
    "RETURN (I, J) SUCH THAT TEXT[I:J] IS THE LONGEST PALINDROME IN TEXT."
    # YOUR CODE HERE
    IF TEXT IS '':
        RETURN 0,0
    TEXT = TEXT.UPPER()
    #I = 0
    #J = LEN(TEXT)
    #WORD_LIST = ()
    #LARGEST = ''
    #FOR I IN RANGE(LEN(TEXT)+1):
    #    FOR J IN RANGE(LEN(TEXT),I, -1):
    #        NEW_WORD = LIST(ITERTOOLS.ISLICE(TEXT,I,J))
    #        NEW_WORD = "".JOIN(NEW_WORD)
    #        
    #        IF VALID(NEW_WORD) AND LEN(NEW_WORD) > LEN(LARGEST):
    #            LARGEST = NEW_WORD
    #            WORD_LIST = I,J
    #RETURN WORD_LIST
    GENERATE_WORDS(TEXT)

DEF GENERATE_WORDS(TEXT):
    NUMS = []
    WORD_LIST=[]
    FOR NUMBER IN RANGE(0,LEN(TEXT)+1):
        NUMS.APPEND(NUMBER)
    FOR START,END IN LIST(ITERTOOLS.COMBINATIONS(NUMS, 2)):
        NEW_WORD = LIST(ITERTOOLS.ISLICE(TEXT,START,END))
        NEW_WORD = "".JOIN(NEW_WORD)
        WORD_LIST.APPEND([NEW_WORD,START,END])
    VALID(WORD_LIST)

DEF VALID(WORD_LIST):
    VALID_WORDS = []
    FOR WORD IN WORD_LIST:
        IF WORD[0] == WORD[0][::-1]:
            VALID_WORDS.APPEND(WORD)
    FIND_LONGEST(VALID_WORDS)

DEF FIND_LONGEST(VALID_WORDS):
    LENGTH = 0
    IF LEN(VALID_WORDS) == 1:
        RETURN VALID_WORDS[1],VALID_WORDS[2]
    ELSE:
        FOR WORD IN VALID_WORDS:
            IF WORD[2] - WORD[1] >= LENGTH:
                LENGTH = WORD[2] - WORD[1]
                LONGEST = WORD[1],WORD[2]
    PRINT LONGEST
    RETURN LONGEST
                
         
DEF TEST():
    L = LONGEST_SUBPALINDROME_SLICE
    #ASSERT L('RACECAR') == (0, 7)
    #ASSERT L('RACECAR') == (0, 7)
    ##ASSERT L('RACECARX') == (0, 7)
    #assert L('Race carr') == (7, 9)
    #assert L('') == (0, 0)
    #assert L('something rac e car going') == (8,21)
    assert L('xxxxx') == (0, 5)
    assert L('Mad am I ma dam.') == (0, 15)
    return 'tests pass'

print test()
#generate_words('racecar')
